1.-Based on the "neuronal network.xlsx" data we create matrix and vectors (input,target and sample) in matlab.
    intpu = [100	30	50	58	49	70	70	10	40	40	39	50	55	61	100
    0	0	1	1	0	1	0	0	1	0	1	1	1	0	1
    100	20	100	150	200	1000	99	2121	80	5	120	230	115	300	278];
    target = [0	0	1	1	1	0	1	0	1	0	1	1	1	0	0];
    sample = [48
    1
    100];
2.-Type "nntool" in the Matlab command line and wait for it opens.
3.-Add input and sample as InputData using the Import button.
4.-Add target as TargetData using the Import button.
5.-Create a network by the New button.
    5.1.-In Network Type select Feed-forward backprop (default).
    5.2.-Selecting input matrix as InputData, target vector as TargetData.
    5.3.-In this test: We use default parameters in Trainig function, Adaption learning function, 
                  Performance function and Number of layers
    5.4.-In "Properties for", select Layer 2 and select "PURELIN" in Trnasfer Function.
    5.5.-Click on "Create" button then close that window and return to the nntool window.
6.-Select your network and click Open.
    This displays a network window there you can especify some other parameters for the trainig and ths simulation,etc.
    6.1.-Go to Train section. Select the input matrix as Input and target vector as Targets in the Trainig Data. 
          Then click ok "Train Network" button.
          This opens a Neuronal Network Trainig window where you can see stadistic results and graphics,etc.
    6.2.-Return to the network window.
    6.3.-Go to Simulate. Select sample vector as Inputs in the Simulation Data and type "network1_prediction" as Outputs 
          in Simulation Results.
          Then click ok "Simulate Network" button.
    6.7.-Return to nntool, here you can see the prediction result. I get : 1.0007
Note:
    You can export all the data generated by the nntool to the Matlab workspace by the "Export" button in nntool.
   
